DECLARE @INDEX INT = {{Workflow.Properties.index}},
        @OPTION NVARCHAR(100) = '{{Workflow.Properties.option}}';

-- Debugging: Check if data exists before updating
SELECT DR.*, PS.ROLL_QUANTITY, PS.DAY_INDEX, PS.[OPTION]
FROM [SGP].[dbo].[DELIVERY_REQUEST] DR
INNER JOIN [SGP].[dbo].[PRODUCTION_SCHEDULE] PS 
    ON CAST(DR.PO_NUMBER AS NVARCHAR(50)) = CAST(PS.PO_NUMBER AS NVARCHAR(50))
    AND CAST(DR.WEIGHT AS FLOAT) = CAST(PS.UNIT_WEIGHT AS FLOAT)
    AND CAST(DR.WIDTH AS FLOAT) = CAST(PS.WIDTH AS FLOAT)
    AND LTRIM(RTRIM(DR.PRODUCT)) = LTRIM(RTRIM(PS.ITEM_NAME))
WHERE PS.[OPTION] = @OPTION  
AND PS.DAY_INDEX = @INDEX
AND DR.IS_DELETED = 0;

-- Update PO_ROLL, ensuring it doesn't go negative
UPDATE DR
SET DR.PO_ROLL = CASE 
    WHEN DR.PO_ROLL >= PS.ROLL_QUANTITY 
    THEN DR.PO_ROLL - PS.ROLL_QUANTITY 
    ELSE 0 
END
FROM [SGP].[dbo].[DELIVERY_REQUEST] DR
INNER JOIN [SGP].[dbo].[PRODUCTION_SCHEDULE] PS 
    ON CAST(DR.PO_NUMBER AS NVARCHAR(50)) = CAST(PS.PO_NUMBER AS NVARCHAR(50))
    AND CAST(DR.WEIGHT AS FLOAT) = CAST(PS.UNIT_WEIGHT AS FLOAT)
    AND CAST(DR.WIDTH AS FLOAT) = CAST(PS.WIDTH AS FLOAT)
    AND LTRIM(RTRIM(DR.PRODUCT)) = LTRIM(RTRIM(PS.ITEM_NAME))
WHERE PS.[OPTION] = @OPTION  
AND PS.DAY_INDEX = @INDEX
AND DR.IS_DELETED = 0;

-- Check if rows exist before deleting
SELECT * FROM SGP.DBO.PRODUCTION_SCHEDULE WHERE DAY_INDEX = @INDEX AND [OPTION] = @OPTION;

-- Delete from Production Schedule
DELETE FROM SGP.DBO.PRODUCTION_SCHEDULE 
WHERE DAY_INDEX = @INDEX 
AND [OPTION] = @OPTION;

-- Adjust DAY_INDEX for remaining records
UPDATE SGP.DBO.PRODUCTION_SCHEDULE 
SET DAY_INDEX = DAY_INDEX - 1 
WHERE DAY_INDEX > @INDEX 
AND [OPTION] = @OPTION;
